/** @file
*
*  Copyright (c) 2018 Microsoft Corporation. All rights reserved.
*
*  This program and the accompanying materials
*  are licensed and made available under the terms and conditions of the BSD License
*  which accompanies this distribution.  The full text of the license may be found at
*  http://opensource.org/licenses/bsd-license.php
*
*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
*
**/

#include <Platform.h>

#include <IndustryStandard/MemoryMappedConfigurationSpaceAccessTable.h>

#include <iMX6.h>
#include <iMX6PciExpress.h>

#define EFI_ACPI_OEM_MCFG_REVISION 0x00000001

// Size in bytes a single bus consumes in ECAM space
// Configuration size = 4K
// Max device = 32
// Max function = 8
// Max bus size = 4K * 32 * 8
#define ECAM_BUS_ADDR_SIZE  (1 << 20)

// Provide 2 differenct base PCI space address. The first list would represent
// the host config space and the second list would be the device config space.
// Windows is expected to be able to parse the information.
#define NUM_PCI 2

// MCFG structure
// PCI Firmware specification Table 4-2
#pragma pack(push, 1)

typedef struct {
  EFI_ACPI_DESCRIPTION_HEADER Header;
  UINT64                      Reserved;
  EFI_ACPI_MEMORY_MAPPED_ENHANCED_CONFIGURATION_SPACE_BASE_ADDRESS_ALLOCATION_STRUCTURE AllocationStructure[NUM_PCI];
} EFI_ACPI_MEMORY_MAPPED_CONFIGURATION_SPACE_ACCESS_DESCRIPTION_TABLE;

#pragma pack(pop)

//
// Multiple APIC Description Table
//
EFI_ACPI_MEMORY_MAPPED_CONFIGURATION_SPACE_ACCESS_DESCRIPTION_TABLE Mcfg = {
  {
    EFI_ACPI_5_0_PCI_EXPRESS_MEMORY_MAPPED_CONFIGURATION_SPACE_BASE_ADDRESS_DESCRIPTION_TABLE_SIGNATURE,
    sizeof (EFI_ACPI_MEMORY_MAPPED_CONFIGURATION_SPACE_ACCESS_DESCRIPTION_TABLE),
    EFI_ACPI_MEMORY_MAPPED_CONFIGURATION_SPACE_ACCESS_TABLE_REVISION,
    0x00,                           // Checksum will be updated at runtime
    EFI_ACPI_OEM_ID,                // OEMID
    EFI_ACPI_OEM_TABLE_ID,          // OEM Table ID
    EFI_ACPI_OEM_MCFG_REVISION,     // OEM Revision
    EFI_ACPI_CREATOR_ID,            // Creator ID
    EFI_ACPI_CREATOR_REVISION,      // Creator revision
  },
  0x00,                             // Reserved

  {
    // PCIe Host
    {
      PCIE_HOST_CONFIG_BASE_REG,        // PCIE Host Config Base Address
      0x00,                             // PciSegmentGroupNumber (_SEG)
      0x00,                             // StartBusNumber
      0x00,                             // EndBusNumber
      0x00000000                        // Reserved
    },

    // PCIe Device
    {
      PCIE_DEVICE_CONFIG_BASE_REG - ECAM_BUS_ADDR_SIZE,  // BaseAddress
      0x00,                              // PciSegmentGroupNumber (_SEG)
      0x01,                              // StartBusNumber
      0x01,                              // EndBusNumber
      0x00000000                         // Reserved
    }
  }
};

VOID*
ReferenceAcpiTable (
  VOID
  )
{
  return (VOID *)&Mcfg;
}
